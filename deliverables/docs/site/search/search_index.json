{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MyShelfie`s documentation!","text":""},{"location":"#navigating-the-documentation","title":"Navigating the documentation","text":"<p>If you want to connect to an already running server, head over to the client documentation.</p> <p>Instead, if you want to run your own server, head over to the server documentation.</p> <p>If you want to have a look at the advanced features of this game, check these pages out:</p> <ul> <li>Handling client disconnections</li> <li>Making the server crash-proof</li> <li>Handling multiple games at once</li> </ul> <p>If you want to have a look at the UML diagrams, check out these links:</p> <ul> <li>UML Class diagrams:<ul> <li>Client</li> <li>Network, Controller and Model</li> <li>Network detail</li> </ul> </li> <li>Sequence diagrams:<ul> <li>Client-server network communication protocol</li> </ul> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>MyShelfie is a game developed by Cranio Creations, as a physical board game.</p> <p>This project is a digital adaptation of the game, developed by the GC07 team, as part of the Software Engineering course at Politecnico di Milano.</p> <p>The team members are:</p> <ul> <li>Gabriele Puglisi</li> <li>Matteo Santelmo</li> <li>Giuseppe Steduto</li> <li>Mattia Vicenzotto</li> </ul>"},{"location":"advanced-features/disconnection/","title":"Client disconnection","text":"<p>One of the advanced features this game implements is the handling of client disconnections. It is done in a way that is transparent to the client, and that allows the client to rejoin a game even after it disconnected, without pausing the game for the other players.</p>"},{"location":"advanced-features/disconnection/#how-it-works","title":"How it works","text":"<p>When a client connects to the server (either via RMI or via Socket), it is registered with a unique nickname. After the client receives confirmation of the registration, it starts a thread that periodically (every <code>HEARTBEAT_PERIOD</code> seconds) sends a \"heartbeat\" message to the server. The default value for <code>HEARTBEAT_PERIOD</code> is 5 seconds.</p> <p>The server, on the other hand, after registering a client, starts for each client a thread that checks if the last heartbeat of the client was received within a certain time interval (we set it as double the heartbeat interval).</p>"},{"location":"advanced-features/disconnection/#disconnection","title":"Disconnection","text":"<p>If the last heartbeat is too old (more than <code>HEARTBEAT_TIMEOUT</code>), the server considers the client disconnected, and performs different actions depending on the status of the game in which the client was playing:</p> <ul> <li>If the client had not yet joined a game (i.e. before joining a lobby or in the \"waiting stage\"   in the lobby), the server simply removes the client from the list of registered clients.</li> <li>If the client was in a game, the server will set the player status to \"disconnected\", and will notify the other   clients in the game that the client disconnected with the first message it sends to the game. The game   does not stop and the player is not removed (so that the player can reconnect later). Simply,   its turn is skipped, and the other players can continue playing.</li> </ul>"},{"location":"advanced-features/disconnection/#reconnection","title":"Reconnection","text":"<ul> <li> <p>If the client loses the connection and reconnects before the <code>HEARTBEAT_TIMEOUT</code> expires, the server will just   pretend that nothing happened.</p> </li> <li> <p>If the client was playing in a game and got disconnected, to rejoin the game it only has to   reconnect to the server using the same nickname with which it registered the first time. The server   will automatically set the player status back to \"online\", and will notify the other clients in the game   that the client reconnected with the first message it sends to the game. The game will continue.</p> </li> </ul>"},{"location":"advanced-features/multiple-games/","title":"Multiple games: one server to rule them all","text":"<p>Our game's server architecture, built to support multiple games concurrently, ensures seamless operation and high performance through the careful use of design patterns and data structures.</p>"},{"location":"advanced-features/multiple-games/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"advanced-features/multiple-games/#the-heart-of-communication","title":"The Heart of Communication","text":"<p>At the heart of our communication pipeline is the <code>LobbyController</code> class, a critical component that acts as a bridge between clients and their respective games. It receives messages from clients through either Remote Method Invocation (RMI) or Socket, based on the client's preference.</p>"},{"location":"advanced-features/multiple-games/#the-mapping-system","title":"The Mapping System","text":"<p>The <code>LobbyController</code> employs a mapping system to manage active games. Each game is uniquely identified by a string representing its name. This name is used as a key in a map that associates each game with its corresponding <code>GameController</code> instance.</p>"},{"location":"advanced-features/multiple-games/#handling-commands-and-actions","title":"Handling Commands and Actions","text":"<p>Every action performed by a user is translated into a command which is sent to the server, which forwards it to the <code>LobbyController</code>, which in turn dispatches it to the associated <code>GameController</code>. To ensure responsiveness and concurrency control, the <code>GameController</code> adds the command to a queue, allowing it to return control to the <code>LobbyController</code> immediately without having to wait for the execution of the command. index.md The command queue is managed by a single-threaded executor to guarantee that commands are processed sequentially and in the order they were received, thereby avoiding concurrency issues.</p>"},{"location":"advanced-features/persistence/","title":"Persistence: making the server crash-proof","text":"<p>Our  game server has a built-in persistence feature that allows it to withstand crashes and restore a previously saved state. This functionality ensures a seamless gaming experience for the players, minimizing the impact of unexpected server disruptions.</p>"},{"location":"advanced-features/persistence/#how-it-works","title":"How it works","text":"<p>The server maintains a comprehensive map of <code>GameController</code> instances which holds the state of each game and the players connected to it. Whenever a user performs a command in any game, the server's status is saved to a local <code>serverBackup.ser</code> file.</p> <p>The method responsible for writing this file is declared as <code>synchronized</code>. This keyword ensures that multiple <code>GameController</code> instances cannot access the file concurrently, avoiding potential inconsistencies or corruption in the saved state.</p>"},{"location":"advanced-features/persistence/#restoring-the-server-state","title":"Restoring the server state","text":"<p>When restarting the server, you can use the <code>--backup</code> flag to attempt a restoration of the previous state from the <code>serverBackup.ser</code> file. This way, the game can pick up from where it left off.</p> <p>Warning</p> <p>Every time the server starts, the <code>serverBackup.ser</code> file is overwritten with the new state of the server. If you run it without the <code>--backup</code> flag, the previous saved state will be lost.</p> <p>This server persistence feature contributes to the robustness and reliability of the MyShelfie gaming experience. Enjoy the benefits of continuity and minimal disruption in your multiplayer games!</p>"},{"location":"client/","title":"Client documentation","text":"<p>This documentation page aims to provide you with detailed instructions on how to set up and run the client-side software of the game.</p> <p>Note</p> <p>Before we begin, ensure that you have the server component of the game up and running. Head over to the server documentation for instructions on how to do that.</p>"},{"location":"client/#prerequisites","title":"Prerequisites","text":"<p>The Softeng-gc07 client is built on Java, therefore it requires a Java Runtime Environment (JRE) to function. Please make sure that you have JRE installed on your system and it is of version 11 or later.</p> <p>To check your Java version, use the following command in your terminal or command prompt:</p> <pre><code>java -version\n</code></pre>"},{"location":"client/#getting-started","title":"Getting Started","text":"<p>Kickstarting the client is a straightforward process. First, navigate to the <code>deliverables</code> directory. The file <code>client.jar</code> is what you're looking for, this is the compiled JAR file for the client.</p> <p>The format of the command to run the client is the following:</p> <pre><code>java -jar ./softeng-gc07.jar [--cli|--gui] [--server-address=&lt;server-address&gt;] [--socket|--rmi]\n</code></pre>"},{"location":"client/#command-line-arguments","title":"Command-line arguments","text":"<p>To customize your gaming experience, there are several optional command-line parameters you can utilize:</p> <ul> <li><code>--cli</code> or <code>--gui</code>: These flags allow you to choose between the textual and graphical interfaces of the game. If you don't specify anything, the game is launched with the graphical interface by default.</li> <li><code>--server-address=&lt;server-address&gt;</code>: This parameter allows you to specify the server address if it's different from the default one (localhost).</li> <li><code>--socket</code> or <code>--rmi</code>: These flags allow you to choose between the socket and RMI connection types. If you don't specify anything, the game is launched with the socket connection by default.</li> </ul> <p>Tip</p> <p>The <code>--server-address</code> parameter accepts both IP addresses and hostnames. This provides flexibility in case you have a valid DNS record for your server in the DNS server used by your client.</p>"},{"location":"client/#example-usage","title":"Example usage","text":"<p>Here's an example of using these parameters:</p> <pre><code>java -jar ./softeng-gc07.jar --cli --socket --server-address=192.168.1.51\n</code></pre>"},{"location":"javadoc/legal/jquery/","title":"Jquery","text":""},{"location":"javadoc/legal/jquery/#jquery-v360","title":"jQuery v3.6.0","text":""},{"location":"javadoc/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.6.0\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n******************************************\n\nThe jQuery JavaScript Library v3.6.0 also includes Sizzle.js\n\nSizzle.js includes the following license:\n\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/sizzle\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n*********************\n</code></pre>"},{"location":"javadoc/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"javadoc/legal/jqueryUI/#jquery-ui-v1131","title":"jQuery UI v1.13.1","text":""},{"location":"javadoc/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"server/","title":"Server documentation","text":"<p>This documentation page aims to provide you with detailed instructions on how to set up and run the server-side software of the game.</p>"},{"location":"server/#running-the-server","title":"Running the Server","text":"<p>Initiating the server requires a few simple steps. First, navigate to the <code>deliverables</code> directory. In this directory, you'll find the <code>server.jar</code> file which contains the server program.</p> <p>The format of the command to run the server is the following:</p> <pre><code>java -jar ./server.jar [--logging=&lt;debug|info|error&gt;] [--server-address=&lt;server-address&gt;]\n</code></pre>"},{"location":"server/#command-line-arguments","title":"Command-line arguments","text":"<p>For custom server configurations, we provide several optional command-line parameters:</p> <ul> <li><code>--server-address=&lt;server-address&gt;</code>: Specifies the IP address of the interface for the server to listen on, as visible from the client. If omitted, the server defaults to listening on localhost.</li> <li><code>--logging=&lt;debug|info|error&gt;</code>: Sets the server's logging level (see below for more information).</li> <li><code>--backup</code>: Tries to restore the server state from a backup file. If the file is not found, the server will start with a clean state.</li> </ul> <p>Tip</p> <p>If you are running the server after a crash, maybe due to a power outage or connectivity problem, use the <code>--backup</code> flag to restore the previous state. If you want to learn more about how the server state is backed up, head over to the persistence page.</p> <p>Here's an example of using these parameters:</p> <pre><code>java -jar ./server.jar --server-address=192.168.1.51 --logging=debug\n</code></pre>"},{"location":"server/#logging","title":"Logging","text":"<p>Our server features robust logging capabilities, designed to provide comprehensive insights into server operations. Every log message is simultaneously displayed on the console and recorded in a log file named <code>server.log</code>. The log file is appended with new entries each time the server is run.</p> <p>The logging level can be defined by setting the <code>--logging</code> parameter at startup. Available values are:</p> <ul> <li><code>info</code>: Records all significant server events. This level corresponds to the <code>Loglevel.INFO</code> enum value.</li> <li><code>debug</code>: Captures all server events. This level corresponds to the <code>Loglevel.FINE</code> enum value.</li> <li> <p><code>error</code>: Logs only server errors. This level corresponds to the <code>Loglevel.SEVERE</code> enum value.</p> </li> <li> <p>By default, if not specified, the logging level is set to <code>info</code>.</p> </li> </ul> <p>Enjoy your journey as the game server operator and happy gaming!</p>"},{"location":"uml/","title":"UML diagrams","text":"<ul> <li>UML Class diagrams:<ul> <li>Client</li> <li>Network, Controller and Model</li> <li>Network detail</li> </ul> </li> <li>Sequence diagrams:<ul> <li>Client-server network communication protocol</li> </ul> </li> </ul>"}]}