package org.myshelfie.network.local;

import org.myshelfie.controller.GameController;
import org.myshelfie.model.Game;
import org.myshelfie.network.Client;
import org.myshelfie.network.EventManager;
import org.myshelfie.network.listener.UserListener;
import org.myshelfie.network.messages.commandMessages.CommandMessage;
import org.myshelfie.network.messages.commandMessages.CommandMessageType;
import org.myshelfie.network.messages.commandMessages.CommandMessageWrapper;
import org.myshelfie.network.Server;

import java.util.ArrayList;
import java.util.List;

public class ServerImpl implements Server {
    private List<Client> clients;
    private Game model;
    private GameController controller;
    private EventManager eventManager = new EventManager();


    /**
     * Constructor of the server, it creates the model and the controller for the game.
     * NOTE: for the moment the server can only handle one Game (but it can handle multiple clients).
     */
    public ServerImpl() {
        // FIXME: Game inizialization missing
        this.model = new Game();
        this.controller = new GameController(model, clients);
        this.clients = new ArrayList<>();
    }

    /**
     * Register a client to the server
     * @param client the client to register
     */
    @Override
    public void register(Client client) {
        this.clients.add(client);
        // Suscribe a new UserListener in order to receive messages generated by an action
        // performed by the client and forward it to the server (controller)
        eventManager.subscribe(CommandMessageType.class, new UserListener(this, client));
    }

    /**
     * Update of the server after a client send a message. This method forwards the message produced by the View (which is
     * observed by the client) to the controller, specifying the client that generated the event.
     * @param client  the client that generated the event
     * @param msg wrapped message received from the client
     */
    @Override
    public void update(Client client, CommandMessageWrapper msg) {
        if (!clients.contains(client)) {
            throw new IllegalArgumentException("Client not registered");
        }
        // TODO: understand how to use information about the client that sent the message

        // unwrap the message
        CommandMessageType messageType = msg.getType();
        String messageCommand = msg.getMessage();
        // call the update on the controller
        this.controller.executeCommand(messageCommand, messageType);
    }
}

